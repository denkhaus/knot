// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// ProjectsColumns holds the columns for the "projects" table.
	ProjectsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "title", Type: field.TypeString, Size: 200},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "state", Type: field.TypeEnum, Enums: []string{"active", "completed", "archived", "deletion-pending"}, Default: "active"},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "total_tasks", Type: field.TypeInt, Default: 0},
		{Name: "completed_tasks", Type: field.TypeInt, Default: 0},
		{Name: "progress", Type: field.TypeFloat64, Default: 0},
	}
	// ProjectsTable holds the schema information for the "projects" table.
	ProjectsTable = &schema.Table{
		Name:       "projects",
		Columns:    ProjectsColumns,
		PrimaryKey: []*schema.Column{ProjectsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "project_created_at",
				Unique:  false,
				Columns: []*schema.Column{ProjectsColumns[4]},
			},
			{
				Name:    "project_title",
				Unique:  false,
				Columns: []*schema.Column{ProjectsColumns[1]},
			},
			{
				Name:    "project_progress",
				Unique:  false,
				Columns: []*schema.Column{ProjectsColumns[8]},
			},
			{
				Name:    "project_state",
				Unique:  false,
				Columns: []*schema.Column{ProjectsColumns[3]},
			},
		},
	}
	// ProjectContextsColumns holds the columns for the "project_contexts" table.
	ProjectContextsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "updated_by", Type: field.TypeString},
		{Name: "selected_project_id", Type: field.TypeUUID},
	}
	// ProjectContextsTable holds the schema information for the "project_contexts" table.
	ProjectContextsTable = &schema.Table{
		Name:       "project_contexts",
		Columns:    ProjectContextsColumns,
		PrimaryKey: []*schema.Column{ProjectContextsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "project_contexts_projects_selected_project",
				Columns:    []*schema.Column{ProjectContextsColumns[3]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TasksColumns holds the columns for the "tasks" table.
	TasksColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "title", Type: field.TypeString, Size: 200},
		{Name: "description", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "state", Type: field.TypeEnum, Enums: []string{"pending", "in-progress", "completed", "blocked", "cancelled", "deletion-pending"}, Default: "pending"},
		{Name: "priority", Type: field.TypeEnum, Enums: []string{"low", "medium", "high"}, Default: "medium"},
		{Name: "complexity", Type: field.TypeInt},
		{Name: "depth", Type: field.TypeInt, Default: 0},
		{Name: "estimate", Type: field.TypeInt64, Nullable: true},
		{Name: "assigned_agent", Type: field.TypeUUID, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "completed_at", Type: field.TypeTime, Nullable: true},
		{Name: "project_id", Type: field.TypeUUID},
		{Name: "parent_id", Type: field.TypeUUID, Nullable: true},
	}
	// TasksTable holds the schema information for the "tasks" table.
	TasksTable = &schema.Table{
		Name:       "tasks",
		Columns:    TasksColumns,
		PrimaryKey: []*schema.Column{TasksColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tasks_projects_tasks",
				Columns:    []*schema.Column{TasksColumns[12]},
				RefColumns: []*schema.Column{ProjectsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "tasks_tasks_children",
				Columns:    []*schema.Column{TasksColumns[13]},
				RefColumns: []*schema.Column{TasksColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "task_project_id",
				Unique:  false,
				Columns: []*schema.Column{TasksColumns[12]},
			},
			{
				Name:    "task_parent_id",
				Unique:  false,
				Columns: []*schema.Column{TasksColumns[13]},
			},
			{
				Name:    "task_state",
				Unique:  false,
				Columns: []*schema.Column{TasksColumns[3]},
			},
			{
				Name:    "task_priority",
				Unique:  false,
				Columns: []*schema.Column{TasksColumns[4]},
			},
			{
				Name:    "task_assigned_agent",
				Unique:  false,
				Columns: []*schema.Column{TasksColumns[8]},
			},
			{
				Name:    "task_complexity",
				Unique:  false,
				Columns: []*schema.Column{TasksColumns[5]},
			},
			{
				Name:    "task_depth",
				Unique:  false,
				Columns: []*schema.Column{TasksColumns[6]},
			},
			{
				Name:    "task_created_at",
				Unique:  false,
				Columns: []*schema.Column{TasksColumns[9]},
			},
			{
				Name:    "task_project_id_state",
				Unique:  false,
				Columns: []*schema.Column{TasksColumns[12], TasksColumns[3]},
			},
			{
				Name:    "task_project_id_priority",
				Unique:  false,
				Columns: []*schema.Column{TasksColumns[12], TasksColumns[4]},
			},
			{
				Name:    "task_project_id_assigned_agent",
				Unique:  false,
				Columns: []*schema.Column{TasksColumns[12], TasksColumns[8]},
			},
			{
				Name:    "task_project_id_parent_id",
				Unique:  false,
				Columns: []*schema.Column{TasksColumns[12], TasksColumns[13]},
			},
			{
				Name:    "task_project_id_depth",
				Unique:  false,
				Columns: []*schema.Column{TasksColumns[12], TasksColumns[6]},
			},
			{
				Name:    "task_state_complexity",
				Unique:  false,
				Columns: []*schema.Column{TasksColumns[3], TasksColumns[5]},
			},
			{
				Name:    "task_priority_state",
				Unique:  false,
				Columns: []*schema.Column{TasksColumns[4], TasksColumns[3]},
			},
			{
				Name:    "task_priority_complexity",
				Unique:  false,
				Columns: []*schema.Column{TasksColumns[4], TasksColumns[5]},
			},
		},
	}
	// TaskDependenciesColumns holds the columns for the "task_dependencies" table.
	TaskDependenciesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "task_id", Type: field.TypeUUID},
		{Name: "depends_on_task_id", Type: field.TypeUUID},
	}
	// TaskDependenciesTable holds the schema information for the "task_dependencies" table.
	TaskDependenciesTable = &schema.Table{
		Name:       "task_dependencies",
		Columns:    TaskDependenciesColumns,
		PrimaryKey: []*schema.Column{TaskDependenciesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "task_dependencies_tasks_task",
				Columns:    []*schema.Column{TaskDependenciesColumns[2]},
				RefColumns: []*schema.Column{TasksColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "task_dependencies_tasks_depends_on_task",
				Columns:    []*schema.Column{TaskDependenciesColumns[3]},
				RefColumns: []*schema.Column{TasksColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "taskdependency_task_id",
				Unique:  false,
				Columns: []*schema.Column{TaskDependenciesColumns[2]},
			},
			{
				Name:    "taskdependency_depends_on_task_id",
				Unique:  false,
				Columns: []*schema.Column{TaskDependenciesColumns[3]},
			},
			{
				Name:    "taskdependency_task_id_depends_on_task_id",
				Unique:  true,
				Columns: []*schema.Column{TaskDependenciesColumns[2], TaskDependenciesColumns[3]},
			},
			{
				Name:    "taskdependency_depends_on_task_id_task_id",
				Unique:  false,
				Columns: []*schema.Column{TaskDependenciesColumns[3], TaskDependenciesColumns[2]},
			},
			{
				Name:    "taskdependency_created_at",
				Unique:  false,
				Columns: []*schema.Column{TaskDependenciesColumns[1]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		ProjectsTable,
		ProjectContextsTable,
		TasksTable,
		TaskDependenciesTable,
	}
)

func init() {
	ProjectContextsTable.ForeignKeys[0].RefTable = ProjectsTable
	TasksTable.ForeignKeys[0].RefTable = ProjectsTable
	TasksTable.ForeignKeys[1].RefTable = TasksTable
	TaskDependenciesTable.ForeignKeys[0].RefTable = TasksTable
	TaskDependenciesTable.ForeignKeys[1].RefTable = TasksTable
}
