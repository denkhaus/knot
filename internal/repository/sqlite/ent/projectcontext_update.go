// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/denkhaus/knot/internal/repository/sqlite/ent/predicate"
	"github.com/denkhaus/knot/internal/repository/sqlite/ent/project"
	"github.com/denkhaus/knot/internal/repository/sqlite/ent/projectcontext"
	"github.com/google/uuid"
)

// ProjectContextUpdate is the builder for updating ProjectContext entities.
type ProjectContextUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectContextMutation
}

// Where appends a list predicates to the ProjectContextUpdate builder.
func (_u *ProjectContextUpdate) Where(ps ...predicate.ProjectContext) *ProjectContextUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetSelectedProjectID sets the "selected_project_id" field.
func (_u *ProjectContextUpdate) SetSelectedProjectID(v uuid.UUID) *ProjectContextUpdate {
	_u.mutation.SetSelectedProjectID(v)
	return _u
}

// SetNillableSelectedProjectID sets the "selected_project_id" field if the given value is not nil.
func (_u *ProjectContextUpdate) SetNillableSelectedProjectID(v *uuid.UUID) *ProjectContextUpdate {
	if v != nil {
		_u.SetSelectedProjectID(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ProjectContextUpdate) SetUpdatedAt(v time.Time) *ProjectContextUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *ProjectContextUpdate) SetUpdatedBy(v string) *ProjectContextUpdate {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *ProjectContextUpdate) SetNillableUpdatedBy(v *string) *ProjectContextUpdate {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// SetSelectedProject sets the "selected_project" edge to the Project entity.
func (_u *ProjectContextUpdate) SetSelectedProject(v *Project) *ProjectContextUpdate {
	return _u.SetSelectedProjectID(v.ID)
}

// Mutation returns the ProjectContextMutation object of the builder.
func (_u *ProjectContextUpdate) Mutation() *ProjectContextMutation {
	return _u.mutation
}

// ClearSelectedProject clears the "selected_project" edge to the Project entity.
func (_u *ProjectContextUpdate) ClearSelectedProject() *ProjectContextUpdate {
	_u.mutation.ClearSelectedProject()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ProjectContextUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProjectContextUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ProjectContextUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProjectContextUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ProjectContextUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := projectcontext.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProjectContextUpdate) check() error {
	if v, ok := _u.mutation.UpdatedBy(); ok {
		if err := projectcontext.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "ProjectContext.updated_by": %w`, err)}
		}
	}
	if _u.mutation.SelectedProjectCleared() && len(_u.mutation.SelectedProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectContext.selected_project"`)
	}
	return nil
}

func (_u *ProjectContextUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectcontext.Table, projectcontext.Columns, sqlgraph.NewFieldSpec(projectcontext.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(projectcontext.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(projectcontext.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.SelectedProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectcontext.SelectedProjectTable,
			Columns: []string{projectcontext.SelectedProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SelectedProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectcontext.SelectedProjectTable,
			Columns: []string{projectcontext.SelectedProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectcontext.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ProjectContextUpdateOne is the builder for updating a single ProjectContext entity.
type ProjectContextUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectContextMutation
}

// SetSelectedProjectID sets the "selected_project_id" field.
func (_u *ProjectContextUpdateOne) SetSelectedProjectID(v uuid.UUID) *ProjectContextUpdateOne {
	_u.mutation.SetSelectedProjectID(v)
	return _u
}

// SetNillableSelectedProjectID sets the "selected_project_id" field if the given value is not nil.
func (_u *ProjectContextUpdateOne) SetNillableSelectedProjectID(v *uuid.UUID) *ProjectContextUpdateOne {
	if v != nil {
		_u.SetSelectedProjectID(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ProjectContextUpdateOne) SetUpdatedAt(v time.Time) *ProjectContextUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetUpdatedBy sets the "updated_by" field.
func (_u *ProjectContextUpdateOne) SetUpdatedBy(v string) *ProjectContextUpdateOne {
	_u.mutation.SetUpdatedBy(v)
	return _u
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (_u *ProjectContextUpdateOne) SetNillableUpdatedBy(v *string) *ProjectContextUpdateOne {
	if v != nil {
		_u.SetUpdatedBy(*v)
	}
	return _u
}

// SetSelectedProject sets the "selected_project" edge to the Project entity.
func (_u *ProjectContextUpdateOne) SetSelectedProject(v *Project) *ProjectContextUpdateOne {
	return _u.SetSelectedProjectID(v.ID)
}

// Mutation returns the ProjectContextMutation object of the builder.
func (_u *ProjectContextUpdateOne) Mutation() *ProjectContextMutation {
	return _u.mutation
}

// ClearSelectedProject clears the "selected_project" edge to the Project entity.
func (_u *ProjectContextUpdateOne) ClearSelectedProject() *ProjectContextUpdateOne {
	_u.mutation.ClearSelectedProject()
	return _u
}

// Where appends a list predicates to the ProjectContextUpdate builder.
func (_u *ProjectContextUpdateOne) Where(ps ...predicate.ProjectContext) *ProjectContextUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ProjectContextUpdateOne) Select(field string, fields ...string) *ProjectContextUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ProjectContext entity.
func (_u *ProjectContextUpdateOne) Save(ctx context.Context) (*ProjectContext, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProjectContextUpdateOne) SaveX(ctx context.Context) *ProjectContext {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ProjectContextUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProjectContextUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ProjectContextUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := projectcontext.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProjectContextUpdateOne) check() error {
	if v, ok := _u.mutation.UpdatedBy(); ok {
		if err := projectcontext.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "ProjectContext.updated_by": %w`, err)}
		}
	}
	if _u.mutation.SelectedProjectCleared() && len(_u.mutation.SelectedProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectContext.selected_project"`)
	}
	return nil
}

func (_u *ProjectContextUpdateOne) sqlSave(ctx context.Context) (_node *ProjectContext, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectcontext.Table, projectcontext.Columns, sqlgraph.NewFieldSpec(projectcontext.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProjectContext.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projectcontext.FieldID)
		for _, f := range fields {
			if !projectcontext.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != projectcontext.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(projectcontext.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedBy(); ok {
		_spec.SetField(projectcontext.FieldUpdatedBy, field.TypeString, value)
	}
	if _u.mutation.SelectedProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectcontext.SelectedProjectTable,
			Columns: []string{projectcontext.SelectedProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SelectedProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectcontext.SelectedProjectTable,
			Columns: []string{projectcontext.SelectedProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProjectContext{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectcontext.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
