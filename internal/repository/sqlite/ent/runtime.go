// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/denkhaus/knot/internal/repository/sqlite/ent/project"
	"github.com/denkhaus/knot/internal/repository/sqlite/ent/schema"
	"github.com/denkhaus/knot/internal/repository/sqlite/ent/task"
	"github.com/denkhaus/knot/internal/repository/sqlite/ent/taskdependency"
	"github.com/google/uuid"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	projectFields := schema.Project{}.Fields()
	_ = projectFields
	// projectDescTitle is the schema descriptor for title field.
	projectDescTitle := projectFields[1].Descriptor()
	// project.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	project.TitleValidator = func() func(string) error {
		validators := projectDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// projectDescCreatedAt is the schema descriptor for created_at field.
	projectDescCreatedAt := projectFields[4].Descriptor()
	// project.DefaultCreatedAt holds the default value on creation for the created_at field.
	project.DefaultCreatedAt = projectDescCreatedAt.Default.(func() time.Time)
	// projectDescUpdatedAt is the schema descriptor for updated_at field.
	projectDescUpdatedAt := projectFields[5].Descriptor()
	// project.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	project.DefaultUpdatedAt = projectDescUpdatedAt.Default.(func() time.Time)
	// project.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	project.UpdateDefaultUpdatedAt = projectDescUpdatedAt.UpdateDefault.(func() time.Time)
	// projectDescTotalTasks is the schema descriptor for total_tasks field.
	projectDescTotalTasks := projectFields[6].Descriptor()
	// project.DefaultTotalTasks holds the default value on creation for the total_tasks field.
	project.DefaultTotalTasks = projectDescTotalTasks.Default.(int)
	// project.TotalTasksValidator is a validator for the "total_tasks" field. It is called by the builders before save.
	project.TotalTasksValidator = projectDescTotalTasks.Validators[0].(func(int) error)
	// projectDescCompletedTasks is the schema descriptor for completed_tasks field.
	projectDescCompletedTasks := projectFields[7].Descriptor()
	// project.DefaultCompletedTasks holds the default value on creation for the completed_tasks field.
	project.DefaultCompletedTasks = projectDescCompletedTasks.Default.(int)
	// project.CompletedTasksValidator is a validator for the "completed_tasks" field. It is called by the builders before save.
	project.CompletedTasksValidator = projectDescCompletedTasks.Validators[0].(func(int) error)
	// projectDescProgress is the schema descriptor for progress field.
	projectDescProgress := projectFields[8].Descriptor()
	// project.DefaultProgress holds the default value on creation for the progress field.
	project.DefaultProgress = projectDescProgress.Default.(float64)
	// project.ProgressValidator is a validator for the "progress" field. It is called by the builders before save.
	project.ProgressValidator = func() func(float64) error {
		validators := projectDescProgress.Validators
		fns := [...]func(float64) error{
			validators[0].(func(float64) error),
			validators[1].(func(float64) error),
		}
		return func(progress float64) error {
			for _, fn := range fns {
				if err := fn(progress); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// projectDescID is the schema descriptor for id field.
	projectDescID := projectFields[0].Descriptor()
	// project.DefaultID holds the default value on creation for the id field.
	project.DefaultID = projectDescID.Default.(func() uuid.UUID)
	taskFields := schema.Task{}.Fields()
	_ = taskFields
	// taskDescTitle is the schema descriptor for title field.
	taskDescTitle := taskFields[3].Descriptor()
	// task.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	task.TitleValidator = func() func(string) error {
		validators := taskDescTitle.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(title string) error {
			for _, fn := range fns {
				if err := fn(title); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// taskDescComplexity is the schema descriptor for complexity field.
	taskDescComplexity := taskFields[7].Descriptor()
	// task.ComplexityValidator is a validator for the "complexity" field. It is called by the builders before save.
	task.ComplexityValidator = func() func(int) error {
		validators := taskDescComplexity.Validators
		fns := [...]func(int) error{
			validators[0].(func(int) error),
			validators[1].(func(int) error),
		}
		return func(complexity int) error {
			for _, fn := range fns {
				if err := fn(complexity); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// taskDescDepth is the schema descriptor for depth field.
	taskDescDepth := taskFields[8].Descriptor()
	// task.DefaultDepth holds the default value on creation for the depth field.
	task.DefaultDepth = taskDescDepth.Default.(int)
	// task.DepthValidator is a validator for the "depth" field. It is called by the builders before save.
	task.DepthValidator = taskDescDepth.Validators[0].(func(int) error)
	// taskDescCreatedAt is the schema descriptor for created_at field.
	taskDescCreatedAt := taskFields[11].Descriptor()
	// task.DefaultCreatedAt holds the default value on creation for the created_at field.
	task.DefaultCreatedAt = taskDescCreatedAt.Default.(func() time.Time)
	// taskDescUpdatedAt is the schema descriptor for updated_at field.
	taskDescUpdatedAt := taskFields[12].Descriptor()
	// task.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	task.DefaultUpdatedAt = taskDescUpdatedAt.Default.(func() time.Time)
	// task.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	task.UpdateDefaultUpdatedAt = taskDescUpdatedAt.UpdateDefault.(func() time.Time)
	// taskDescID is the schema descriptor for id field.
	taskDescID := taskFields[0].Descriptor()
	// task.DefaultID holds the default value on creation for the id field.
	task.DefaultID = taskDescID.Default.(func() uuid.UUID)
	taskdependencyFields := schema.TaskDependency{}.Fields()
	_ = taskdependencyFields
	// taskdependencyDescCreatedAt is the schema descriptor for created_at field.
	taskdependencyDescCreatedAt := taskdependencyFields[3].Descriptor()
	// taskdependency.DefaultCreatedAt holds the default value on creation for the created_at field.
	taskdependency.DefaultCreatedAt = taskdependencyDescCreatedAt.Default.(func() time.Time)
	// taskdependencyDescID is the schema descriptor for id field.
	taskdependencyDescID := taskdependencyFields[0].Descriptor()
	// taskdependency.DefaultID holds the default value on creation for the id field.
	taskdependency.DefaultID = taskdependencyDescID.Default.(func() uuid.UUID)
}
