// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/denkhaus/knot/internal/repository/sqlite/ent/task"
	"github.com/denkhaus/knot/internal/repository/sqlite/ent/taskdependency"
	"github.com/google/uuid"
)

// TaskDependency is the model entity for the TaskDependency schema.
type TaskDependency struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// TaskID holds the value of the "task_id" field.
	TaskID uuid.UUID `json:"task_id,omitempty"`
	// DependsOnTaskID holds the value of the "depends_on_task_id" field.
	DependsOnTaskID uuid.UUID `json:"depends_on_task_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskDependencyQuery when eager-loading is set.
	Edges        TaskDependencyEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TaskDependencyEdges holds the relations/edges for other nodes in the graph.
type TaskDependencyEdges struct {
	// Task holds the value of the task edge.
	Task *Task `json:"task,omitempty"`
	// DependsOnTask holds the value of the depends_on_task edge.
	DependsOnTask *Task `json:"depends_on_task,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TaskOrErr returns the Task value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskDependencyEdges) TaskOrErr() (*Task, error) {
	if e.Task != nil {
		return e.Task, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: task.Label}
	}
	return nil, &NotLoadedError{edge: "task"}
}

// DependsOnTaskOrErr returns the DependsOnTask value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskDependencyEdges) DependsOnTaskOrErr() (*Task, error) {
	if e.DependsOnTask != nil {
		return e.DependsOnTask, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: task.Label}
	}
	return nil, &NotLoadedError{edge: "depends_on_task"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*TaskDependency) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case taskdependency.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case taskdependency.FieldID, taskdependency.FieldTaskID, taskdependency.FieldDependsOnTaskID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the TaskDependency fields.
func (_m *TaskDependency) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case taskdependency.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				_m.ID = *value
			}
		case taskdependency.FieldTaskID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value != nil {
				_m.TaskID = *value
			}
		case taskdependency.FieldDependsOnTaskID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field depends_on_task_id", values[i])
			} else if value != nil {
				_m.DependsOnTaskID = *value
			}
		case taskdependency.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the TaskDependency.
// This includes values selected through modifiers, order, etc.
func (_m *TaskDependency) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryTask queries the "task" edge of the TaskDependency entity.
func (_m *TaskDependency) QueryTask() *TaskQuery {
	return NewTaskDependencyClient(_m.config).QueryTask(_m)
}

// QueryDependsOnTask queries the "depends_on_task" edge of the TaskDependency entity.
func (_m *TaskDependency) QueryDependsOnTask() *TaskQuery {
	return NewTaskDependencyClient(_m.config).QueryDependsOnTask(_m)
}

// Update returns a builder for updating this TaskDependency.
// Note that you need to call TaskDependency.Unwrap() before calling this method if this TaskDependency
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *TaskDependency) Update() *TaskDependencyUpdateOne {
	return NewTaskDependencyClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the TaskDependency entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *TaskDependency) Unwrap() *TaskDependency {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: TaskDependency is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *TaskDependency) String() string {
	var builder strings.Builder
	builder.WriteString("TaskDependency(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("task_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.TaskID))
	builder.WriteString(", ")
	builder.WriteString("depends_on_task_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.DependsOnTaskID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// TaskDependencies is a parsable slice of TaskDependency.
type TaskDependencies []*TaskDependency
