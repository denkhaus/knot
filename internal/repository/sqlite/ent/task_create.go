// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/denkhaus/knot/internal/repository/sqlite/ent/project"
	"github.com/denkhaus/knot/internal/repository/sqlite/ent/task"
	"github.com/google/uuid"
)

// TaskCreate is the builder for creating a Task entity.
type TaskCreate struct {
	config
	mutation *TaskMutation
	hooks    []Hook
}

// SetProjectID sets the "project_id" field.
func (_c *TaskCreate) SetProjectID(v uuid.UUID) *TaskCreate {
	_c.mutation.SetProjectID(v)
	return _c
}

// SetParentID sets the "parent_id" field.
func (_c *TaskCreate) SetParentID(v uuid.UUID) *TaskCreate {
	_c.mutation.SetParentID(v)
	return _c
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_c *TaskCreate) SetNillableParentID(v *uuid.UUID) *TaskCreate {
	if v != nil {
		_c.SetParentID(*v)
	}
	return _c
}

// SetTitle sets the "title" field.
func (_c *TaskCreate) SetTitle(v string) *TaskCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *TaskCreate) SetDescription(v string) *TaskCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *TaskCreate) SetNillableDescription(v *string) *TaskCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetState sets the "state" field.
func (_c *TaskCreate) SetState(v task.State) *TaskCreate {
	_c.mutation.SetState(v)
	return _c
}

// SetNillableState sets the "state" field if the given value is not nil.
func (_c *TaskCreate) SetNillableState(v *task.State) *TaskCreate {
	if v != nil {
		_c.SetState(*v)
	}
	return _c
}

// SetPriority sets the "priority" field.
func (_c *TaskCreate) SetPriority(v task.Priority) *TaskCreate {
	_c.mutation.SetPriority(v)
	return _c
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (_c *TaskCreate) SetNillablePriority(v *task.Priority) *TaskCreate {
	if v != nil {
		_c.SetPriority(*v)
	}
	return _c
}

// SetComplexity sets the "complexity" field.
func (_c *TaskCreate) SetComplexity(v int) *TaskCreate {
	_c.mutation.SetComplexity(v)
	return _c
}

// SetDepth sets the "depth" field.
func (_c *TaskCreate) SetDepth(v int) *TaskCreate {
	_c.mutation.SetDepth(v)
	return _c
}

// SetNillableDepth sets the "depth" field if the given value is not nil.
func (_c *TaskCreate) SetNillableDepth(v *int) *TaskCreate {
	if v != nil {
		_c.SetDepth(*v)
	}
	return _c
}

// SetEstimate sets the "estimate" field.
func (_c *TaskCreate) SetEstimate(v int64) *TaskCreate {
	_c.mutation.SetEstimate(v)
	return _c
}

// SetNillableEstimate sets the "estimate" field if the given value is not nil.
func (_c *TaskCreate) SetNillableEstimate(v *int64) *TaskCreate {
	if v != nil {
		_c.SetEstimate(*v)
	}
	return _c
}

// SetAssignedAgent sets the "assigned_agent" field.
func (_c *TaskCreate) SetAssignedAgent(v uuid.UUID) *TaskCreate {
	_c.mutation.SetAssignedAgent(v)
	return _c
}

// SetNillableAssignedAgent sets the "assigned_agent" field if the given value is not nil.
func (_c *TaskCreate) SetNillableAssignedAgent(v *uuid.UUID) *TaskCreate {
	if v != nil {
		_c.SetAssignedAgent(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *TaskCreate) SetCreatedAt(v time.Time) *TaskCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *TaskCreate) SetNillableCreatedAt(v *time.Time) *TaskCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *TaskCreate) SetUpdatedAt(v time.Time) *TaskCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *TaskCreate) SetNillableUpdatedAt(v *time.Time) *TaskCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetCompletedAt sets the "completed_at" field.
func (_c *TaskCreate) SetCompletedAt(v time.Time) *TaskCreate {
	_c.mutation.SetCompletedAt(v)
	return _c
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (_c *TaskCreate) SetNillableCompletedAt(v *time.Time) *TaskCreate {
	if v != nil {
		_c.SetCompletedAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *TaskCreate) SetID(v uuid.UUID) *TaskCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *TaskCreate) SetNillableID(v *uuid.UUID) *TaskCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// SetProject sets the "project" edge to the Project entity.
func (_c *TaskCreate) SetProject(v *Project) *TaskCreate {
	return _c.SetProjectID(v.ID)
}

// SetParent sets the "parent" edge to the Task entity.
func (_c *TaskCreate) SetParent(v *Task) *TaskCreate {
	return _c.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Task entity by IDs.
func (_c *TaskCreate) AddChildIDs(ids ...uuid.UUID) *TaskCreate {
	_c.mutation.AddChildIDs(ids...)
	return _c
}

// AddChildren adds the "children" edges to the Task entity.
func (_c *TaskCreate) AddChildren(v ...*Task) *TaskCreate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddChildIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (_c *TaskCreate) Mutation() *TaskMutation {
	return _c.mutation
}

// Save creates the Task in the database.
func (_c *TaskCreate) Save(ctx context.Context) (*Task, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *TaskCreate) SaveX(ctx context.Context) *Task {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TaskCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TaskCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *TaskCreate) defaults() {
	if _, ok := _c.mutation.State(); !ok {
		v := task.DefaultState
		_c.mutation.SetState(v)
	}
	if _, ok := _c.mutation.Priority(); !ok {
		v := task.DefaultPriority
		_c.mutation.SetPriority(v)
	}
	if _, ok := _c.mutation.Depth(); !ok {
		v := task.DefaultDepth
		_c.mutation.SetDepth(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := task.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := task.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := task.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *TaskCreate) check() error {
	if _, ok := _c.mutation.ProjectID(); !ok {
		return &ValidationError{Name: "project_id", err: errors.New(`ent: missing required field "Task.project_id"`)}
	}
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Task.title"`)}
	}
	if v, ok := _c.mutation.Title(); ok {
		if err := task.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Task.title": %w`, err)}
		}
	}
	if _, ok := _c.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Task.state"`)}
	}
	if v, ok := _c.mutation.State(); ok {
		if err := task.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Task.state": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Priority(); !ok {
		return &ValidationError{Name: "priority", err: errors.New(`ent: missing required field "Task.priority"`)}
	}
	if v, ok := _c.mutation.Priority(); ok {
		if err := task.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "Task.priority": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Complexity(); !ok {
		return &ValidationError{Name: "complexity", err: errors.New(`ent: missing required field "Task.complexity"`)}
	}
	if v, ok := _c.mutation.Complexity(); ok {
		if err := task.ComplexityValidator(v); err != nil {
			return &ValidationError{Name: "complexity", err: fmt.Errorf(`ent: validator failed for field "Task.complexity": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Depth(); !ok {
		return &ValidationError{Name: "depth", err: errors.New(`ent: missing required field "Task.depth"`)}
	}
	if v, ok := _c.mutation.Depth(); ok {
		if err := task.DepthValidator(v); err != nil {
			return &ValidationError{Name: "depth", err: fmt.Errorf(`ent: validator failed for field "Task.depth": %w`, err)}
		}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Task.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Task.updated_at"`)}
	}
	if len(_c.mutation.ProjectIDs()) == 0 {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "Task.project"`)}
	}
	return nil
}

func (_c *TaskCreate) sqlSave(ctx context.Context) (*Task, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *TaskCreate) createSpec() (*Task, *sqlgraph.CreateSpec) {
	var (
		_node = &Task{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(task.Table, sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.State(); ok {
		_spec.SetField(task.FieldState, field.TypeEnum, value)
		_node.State = value
	}
	if value, ok := _c.mutation.Priority(); ok {
		_spec.SetField(task.FieldPriority, field.TypeEnum, value)
		_node.Priority = value
	}
	if value, ok := _c.mutation.Complexity(); ok {
		_spec.SetField(task.FieldComplexity, field.TypeInt, value)
		_node.Complexity = value
	}
	if value, ok := _c.mutation.Depth(); ok {
		_spec.SetField(task.FieldDepth, field.TypeInt, value)
		_node.Depth = value
	}
	if value, ok := _c.mutation.Estimate(); ok {
		_spec.SetField(task.FieldEstimate, field.TypeInt64, value)
		_node.Estimate = &value
	}
	if value, ok := _c.mutation.AssignedAgent(); ok {
		_spec.SetField(task.FieldAssignedAgent, field.TypeUUID, value)
		_node.AssignedAgent = &value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(task.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.CompletedAt(); ok {
		_spec.SetField(task.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = &value
	}
	if nodes := _c.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProjectTable,
			Columns: []string{task.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ParentTable,
			Columns: []string{task.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.ParentID = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.ChildrenTable,
			Columns: []string{task.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TaskCreateBulk is the builder for creating many Task entities in bulk.
type TaskCreateBulk struct {
	config
	err      error
	builders []*TaskCreate
}

// Save creates the Task entities in the database.
func (_c *TaskCreateBulk) Save(ctx context.Context) ([]*Task, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Task, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *TaskCreateBulk) SaveX(ctx context.Context) []*Task {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *TaskCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *TaskCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
