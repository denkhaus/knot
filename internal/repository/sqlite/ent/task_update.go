// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/denkhaus/knot/internal/repository/sqlite/ent/predicate"
	"github.com/denkhaus/knot/internal/repository/sqlite/ent/project"
	"github.com/denkhaus/knot/internal/repository/sqlite/ent/task"
	"github.com/google/uuid"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskMutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (_u *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetProjectID sets the "project_id" field.
func (_u *TaskUpdate) SetProjectID(v uuid.UUID) *TaskUpdate {
	_u.mutation.SetProjectID(v)
	return _u
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableProjectID(v *uuid.UUID) *TaskUpdate {
	if v != nil {
		_u.SetProjectID(*v)
	}
	return _u
}

// SetParentID sets the "parent_id" field.
func (_u *TaskUpdate) SetParentID(v uuid.UUID) *TaskUpdate {
	_u.mutation.SetParentID(v)
	return _u
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableParentID(v *uuid.UUID) *TaskUpdate {
	if v != nil {
		_u.SetParentID(*v)
	}
	return _u
}

// ClearParentID clears the value of the "parent_id" field.
func (_u *TaskUpdate) ClearParentID() *TaskUpdate {
	_u.mutation.ClearParentID()
	return _u
}

// SetTitle sets the "title" field.
func (_u *TaskUpdate) SetTitle(v string) *TaskUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableTitle(v *string) *TaskUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *TaskUpdate) SetDescription(v string) *TaskUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableDescription(v *string) *TaskUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *TaskUpdate) ClearDescription() *TaskUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetState sets the "state" field.
func (_u *TaskUpdate) SetState(v task.State) *TaskUpdate {
	_u.mutation.SetState(v)
	return _u
}

// SetNillableState sets the "state" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableState(v *task.State) *TaskUpdate {
	if v != nil {
		_u.SetState(*v)
	}
	return _u
}

// SetPriority sets the "priority" field.
func (_u *TaskUpdate) SetPriority(v task.Priority) *TaskUpdate {
	_u.mutation.SetPriority(v)
	return _u
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (_u *TaskUpdate) SetNillablePriority(v *task.Priority) *TaskUpdate {
	if v != nil {
		_u.SetPriority(*v)
	}
	return _u
}

// SetComplexity sets the "complexity" field.
func (_u *TaskUpdate) SetComplexity(v int) *TaskUpdate {
	_u.mutation.ResetComplexity()
	_u.mutation.SetComplexity(v)
	return _u
}

// SetNillableComplexity sets the "complexity" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableComplexity(v *int) *TaskUpdate {
	if v != nil {
		_u.SetComplexity(*v)
	}
	return _u
}

// AddComplexity adds value to the "complexity" field.
func (_u *TaskUpdate) AddComplexity(v int) *TaskUpdate {
	_u.mutation.AddComplexity(v)
	return _u
}

// SetDepth sets the "depth" field.
func (_u *TaskUpdate) SetDepth(v int) *TaskUpdate {
	_u.mutation.ResetDepth()
	_u.mutation.SetDepth(v)
	return _u
}

// SetNillableDepth sets the "depth" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableDepth(v *int) *TaskUpdate {
	if v != nil {
		_u.SetDepth(*v)
	}
	return _u
}

// AddDepth adds value to the "depth" field.
func (_u *TaskUpdate) AddDepth(v int) *TaskUpdate {
	_u.mutation.AddDepth(v)
	return _u
}

// SetEstimate sets the "estimate" field.
func (_u *TaskUpdate) SetEstimate(v int64) *TaskUpdate {
	_u.mutation.ResetEstimate()
	_u.mutation.SetEstimate(v)
	return _u
}

// SetNillableEstimate sets the "estimate" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableEstimate(v *int64) *TaskUpdate {
	if v != nil {
		_u.SetEstimate(*v)
	}
	return _u
}

// AddEstimate adds value to the "estimate" field.
func (_u *TaskUpdate) AddEstimate(v int64) *TaskUpdate {
	_u.mutation.AddEstimate(v)
	return _u
}

// ClearEstimate clears the value of the "estimate" field.
func (_u *TaskUpdate) ClearEstimate() *TaskUpdate {
	_u.mutation.ClearEstimate()
	return _u
}

// SetAssignedAgent sets the "assigned_agent" field.
func (_u *TaskUpdate) SetAssignedAgent(v uuid.UUID) *TaskUpdate {
	_u.mutation.SetAssignedAgent(v)
	return _u
}

// SetNillableAssignedAgent sets the "assigned_agent" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableAssignedAgent(v *uuid.UUID) *TaskUpdate {
	if v != nil {
		_u.SetAssignedAgent(*v)
	}
	return _u
}

// ClearAssignedAgent clears the value of the "assigned_agent" field.
func (_u *TaskUpdate) ClearAssignedAgent() *TaskUpdate {
	_u.mutation.ClearAssignedAgent()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TaskUpdate) SetUpdatedAt(v time.Time) *TaskUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetCompletedAt sets the "completed_at" field.
func (_u *TaskUpdate) SetCompletedAt(v time.Time) *TaskUpdate {
	_u.mutation.SetCompletedAt(v)
	return _u
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (_u *TaskUpdate) SetNillableCompletedAt(v *time.Time) *TaskUpdate {
	if v != nil {
		_u.SetCompletedAt(*v)
	}
	return _u
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (_u *TaskUpdate) ClearCompletedAt() *TaskUpdate {
	_u.mutation.ClearCompletedAt()
	return _u
}

// SetProject sets the "project" edge to the Project entity.
func (_u *TaskUpdate) SetProject(v *Project) *TaskUpdate {
	return _u.SetProjectID(v.ID)
}

// SetParent sets the "parent" edge to the Task entity.
func (_u *TaskUpdate) SetParent(v *Task) *TaskUpdate {
	return _u.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Task entity by IDs.
func (_u *TaskUpdate) AddChildIDs(ids ...uuid.UUID) *TaskUpdate {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the Task entity.
func (_u *TaskUpdate) AddChildren(v ...*Task) *TaskUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (_u *TaskUpdate) Mutation() *TaskMutation {
	return _u.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (_u *TaskUpdate) ClearProject() *TaskUpdate {
	_u.mutation.ClearProject()
	return _u
}

// ClearParent clears the "parent" edge to the Task entity.
func (_u *TaskUpdate) ClearParent() *TaskUpdate {
	_u.mutation.ClearParent()
	return _u
}

// ClearChildren clears all "children" edges to the Task entity.
func (_u *TaskUpdate) ClearChildren() *TaskUpdate {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to Task entities by IDs.
func (_u *TaskUpdate) RemoveChildIDs(ids ...uuid.UUID) *TaskUpdate {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to Task entities.
func (_u *TaskUpdate) RemoveChildren(v ...*Task) *TaskUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TaskUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TaskUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TaskUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TaskUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := task.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TaskUpdate) check() error {
	if v, ok := _u.mutation.Title(); ok {
		if err := task.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Task.title": %w`, err)}
		}
	}
	if v, ok := _u.mutation.State(); ok {
		if err := task.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Task.state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Priority(); ok {
		if err := task.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "Task.priority": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Complexity(); ok {
		if err := task.ComplexityValidator(v); err != nil {
			return &ValidationError{Name: "complexity", err: fmt.Errorf(`ent: validator failed for field "Task.complexity": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Depth(); ok {
		if err := task.DepthValidator(v); err != nil {
			return &ValidationError{Name: "depth", err: fmt.Errorf(`ent: validator failed for field "Task.depth": %w`, err)}
		}
	}
	if _u.mutation.ProjectCleared() && len(_u.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Task.project"`)
	}
	return nil
}

func (_u *TaskUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(task.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.State(); ok {
		_spec.SetField(task.FieldState, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Priority(); ok {
		_spec.SetField(task.FieldPriority, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Complexity(); ok {
		_spec.SetField(task.FieldComplexity, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedComplexity(); ok {
		_spec.AddField(task.FieldComplexity, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Depth(); ok {
		_spec.SetField(task.FieldDepth, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDepth(); ok {
		_spec.AddField(task.FieldDepth, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Estimate(); ok {
		_spec.SetField(task.FieldEstimate, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedEstimate(); ok {
		_spec.AddField(task.FieldEstimate, field.TypeInt64, value)
	}
	if _u.mutation.EstimateCleared() {
		_spec.ClearField(task.FieldEstimate, field.TypeInt64)
	}
	if value, ok := _u.mutation.AssignedAgent(); ok {
		_spec.SetField(task.FieldAssignedAgent, field.TypeUUID, value)
	}
	if _u.mutation.AssignedAgentCleared() {
		_spec.ClearField(task.FieldAssignedAgent, field.TypeUUID)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.CompletedAt(); ok {
		_spec.SetField(task.FieldCompletedAt, field.TypeTime, value)
	}
	if _u.mutation.CompletedAtCleared() {
		_spec.ClearField(task.FieldCompletedAt, field.TypeTime)
	}
	if _u.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProjectTable,
			Columns: []string{task.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProjectTable,
			Columns: []string{task.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ParentTable,
			Columns: []string{task.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ParentTable,
			Columns: []string{task.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.ChildrenTable,
			Columns: []string{task.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.ChildrenTable,
			Columns: []string{task.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.ChildrenTable,
			Columns: []string{task.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskMutation
}

// SetProjectID sets the "project_id" field.
func (_u *TaskUpdateOne) SetProjectID(v uuid.UUID) *TaskUpdateOne {
	_u.mutation.SetProjectID(v)
	return _u
}

// SetNillableProjectID sets the "project_id" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableProjectID(v *uuid.UUID) *TaskUpdateOne {
	if v != nil {
		_u.SetProjectID(*v)
	}
	return _u
}

// SetParentID sets the "parent_id" field.
func (_u *TaskUpdateOne) SetParentID(v uuid.UUID) *TaskUpdateOne {
	_u.mutation.SetParentID(v)
	return _u
}

// SetNillableParentID sets the "parent_id" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableParentID(v *uuid.UUID) *TaskUpdateOne {
	if v != nil {
		_u.SetParentID(*v)
	}
	return _u
}

// ClearParentID clears the value of the "parent_id" field.
func (_u *TaskUpdateOne) ClearParentID() *TaskUpdateOne {
	_u.mutation.ClearParentID()
	return _u
}

// SetTitle sets the "title" field.
func (_u *TaskUpdateOne) SetTitle(v string) *TaskUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableTitle(v *string) *TaskUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *TaskUpdateOne) SetDescription(v string) *TaskUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableDescription(v *string) *TaskUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *TaskUpdateOne) ClearDescription() *TaskUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetState sets the "state" field.
func (_u *TaskUpdateOne) SetState(v task.State) *TaskUpdateOne {
	_u.mutation.SetState(v)
	return _u
}

// SetNillableState sets the "state" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableState(v *task.State) *TaskUpdateOne {
	if v != nil {
		_u.SetState(*v)
	}
	return _u
}

// SetPriority sets the "priority" field.
func (_u *TaskUpdateOne) SetPriority(v task.Priority) *TaskUpdateOne {
	_u.mutation.SetPriority(v)
	return _u
}

// SetNillablePriority sets the "priority" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillablePriority(v *task.Priority) *TaskUpdateOne {
	if v != nil {
		_u.SetPriority(*v)
	}
	return _u
}

// SetComplexity sets the "complexity" field.
func (_u *TaskUpdateOne) SetComplexity(v int) *TaskUpdateOne {
	_u.mutation.ResetComplexity()
	_u.mutation.SetComplexity(v)
	return _u
}

// SetNillableComplexity sets the "complexity" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableComplexity(v *int) *TaskUpdateOne {
	if v != nil {
		_u.SetComplexity(*v)
	}
	return _u
}

// AddComplexity adds value to the "complexity" field.
func (_u *TaskUpdateOne) AddComplexity(v int) *TaskUpdateOne {
	_u.mutation.AddComplexity(v)
	return _u
}

// SetDepth sets the "depth" field.
func (_u *TaskUpdateOne) SetDepth(v int) *TaskUpdateOne {
	_u.mutation.ResetDepth()
	_u.mutation.SetDepth(v)
	return _u
}

// SetNillableDepth sets the "depth" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableDepth(v *int) *TaskUpdateOne {
	if v != nil {
		_u.SetDepth(*v)
	}
	return _u
}

// AddDepth adds value to the "depth" field.
func (_u *TaskUpdateOne) AddDepth(v int) *TaskUpdateOne {
	_u.mutation.AddDepth(v)
	return _u
}

// SetEstimate sets the "estimate" field.
func (_u *TaskUpdateOne) SetEstimate(v int64) *TaskUpdateOne {
	_u.mutation.ResetEstimate()
	_u.mutation.SetEstimate(v)
	return _u
}

// SetNillableEstimate sets the "estimate" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableEstimate(v *int64) *TaskUpdateOne {
	if v != nil {
		_u.SetEstimate(*v)
	}
	return _u
}

// AddEstimate adds value to the "estimate" field.
func (_u *TaskUpdateOne) AddEstimate(v int64) *TaskUpdateOne {
	_u.mutation.AddEstimate(v)
	return _u
}

// ClearEstimate clears the value of the "estimate" field.
func (_u *TaskUpdateOne) ClearEstimate() *TaskUpdateOne {
	_u.mutation.ClearEstimate()
	return _u
}

// SetAssignedAgent sets the "assigned_agent" field.
func (_u *TaskUpdateOne) SetAssignedAgent(v uuid.UUID) *TaskUpdateOne {
	_u.mutation.SetAssignedAgent(v)
	return _u
}

// SetNillableAssignedAgent sets the "assigned_agent" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableAssignedAgent(v *uuid.UUID) *TaskUpdateOne {
	if v != nil {
		_u.SetAssignedAgent(*v)
	}
	return _u
}

// ClearAssignedAgent clears the value of the "assigned_agent" field.
func (_u *TaskUpdateOne) ClearAssignedAgent() *TaskUpdateOne {
	_u.mutation.ClearAssignedAgent()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *TaskUpdateOne) SetUpdatedAt(v time.Time) *TaskUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetCompletedAt sets the "completed_at" field.
func (_u *TaskUpdateOne) SetCompletedAt(v time.Time) *TaskUpdateOne {
	_u.mutation.SetCompletedAt(v)
	return _u
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (_u *TaskUpdateOne) SetNillableCompletedAt(v *time.Time) *TaskUpdateOne {
	if v != nil {
		_u.SetCompletedAt(*v)
	}
	return _u
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (_u *TaskUpdateOne) ClearCompletedAt() *TaskUpdateOne {
	_u.mutation.ClearCompletedAt()
	return _u
}

// SetProject sets the "project" edge to the Project entity.
func (_u *TaskUpdateOne) SetProject(v *Project) *TaskUpdateOne {
	return _u.SetProjectID(v.ID)
}

// SetParent sets the "parent" edge to the Task entity.
func (_u *TaskUpdateOne) SetParent(v *Task) *TaskUpdateOne {
	return _u.SetParentID(v.ID)
}

// AddChildIDs adds the "children" edge to the Task entity by IDs.
func (_u *TaskUpdateOne) AddChildIDs(ids ...uuid.UUID) *TaskUpdateOne {
	_u.mutation.AddChildIDs(ids...)
	return _u
}

// AddChildren adds the "children" edges to the Task entity.
func (_u *TaskUpdateOne) AddChildren(v ...*Task) *TaskUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddChildIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (_u *TaskUpdateOne) Mutation() *TaskMutation {
	return _u.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (_u *TaskUpdateOne) ClearProject() *TaskUpdateOne {
	_u.mutation.ClearProject()
	return _u
}

// ClearParent clears the "parent" edge to the Task entity.
func (_u *TaskUpdateOne) ClearParent() *TaskUpdateOne {
	_u.mutation.ClearParent()
	return _u
}

// ClearChildren clears all "children" edges to the Task entity.
func (_u *TaskUpdateOne) ClearChildren() *TaskUpdateOne {
	_u.mutation.ClearChildren()
	return _u
}

// RemoveChildIDs removes the "children" edge to Task entities by IDs.
func (_u *TaskUpdateOne) RemoveChildIDs(ids ...uuid.UUID) *TaskUpdateOne {
	_u.mutation.RemoveChildIDs(ids...)
	return _u
}

// RemoveChildren removes "children" edges to Task entities.
func (_u *TaskUpdateOne) RemoveChildren(v ...*Task) *TaskUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveChildIDs(ids...)
}

// Where appends a list predicates to the TaskUpdate builder.
func (_u *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Task entity.
func (_u *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *TaskUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := task.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TaskUpdateOne) check() error {
	if v, ok := _u.mutation.Title(); ok {
		if err := task.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Task.title": %w`, err)}
		}
	}
	if v, ok := _u.mutation.State(); ok {
		if err := task.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Task.state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Priority(); ok {
		if err := task.PriorityValidator(v); err != nil {
			return &ValidationError{Name: "priority", err: fmt.Errorf(`ent: validator failed for field "Task.priority": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Complexity(); ok {
		if err := task.ComplexityValidator(v); err != nil {
			return &ValidationError{Name: "complexity", err: fmt.Errorf(`ent: validator failed for field "Task.complexity": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Depth(); ok {
		if err := task.DepthValidator(v); err != nil {
			return &ValidationError{Name: "depth", err: fmt.Errorf(`ent: validator failed for field "Task.depth": %w`, err)}
		}
	}
	if _u.mutation.ProjectCleared() && len(_u.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Task.project"`)
	}
	return nil
}

func (_u *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(task.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(task.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.State(); ok {
		_spec.SetField(task.FieldState, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Priority(); ok {
		_spec.SetField(task.FieldPriority, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Complexity(); ok {
		_spec.SetField(task.FieldComplexity, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedComplexity(); ok {
		_spec.AddField(task.FieldComplexity, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Depth(); ok {
		_spec.SetField(task.FieldDepth, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedDepth(); ok {
		_spec.AddField(task.FieldDepth, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Estimate(); ok {
		_spec.SetField(task.FieldEstimate, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedEstimate(); ok {
		_spec.AddField(task.FieldEstimate, field.TypeInt64, value)
	}
	if _u.mutation.EstimateCleared() {
		_spec.ClearField(task.FieldEstimate, field.TypeInt64)
	}
	if value, ok := _u.mutation.AssignedAgent(); ok {
		_spec.SetField(task.FieldAssignedAgent, field.TypeUUID, value)
	}
	if _u.mutation.AssignedAgentCleared() {
		_spec.ClearField(task.FieldAssignedAgent, field.TypeUUID)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(task.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.CompletedAt(); ok {
		_spec.SetField(task.FieldCompletedAt, field.TypeTime, value)
	}
	if _u.mutation.CompletedAtCleared() {
		_spec.ClearField(task.FieldCompletedAt, field.TypeTime)
	}
	if _u.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProjectTable,
			Columns: []string{task.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProjectTable,
			Columns: []string{task.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ParentCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ParentTable,
			Columns: []string{task.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ParentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ParentTable,
			Columns: []string{task.ParentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.ChildrenTable,
			Columns: []string{task.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedChildrenIDs(); len(nodes) > 0 && !_u.mutation.ChildrenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.ChildrenTable,
			Columns: []string{task.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ChildrenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.ChildrenTable,
			Columns: []string{task.ChildrenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Task{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
