// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/denkhaus/knot/internal/repository/sqlite/ent/predicate"
	"github.com/denkhaus/knot/internal/repository/sqlite/ent/task"
	"github.com/denkhaus/knot/internal/repository/sqlite/ent/taskdependency"
	"github.com/google/uuid"
)

// TaskDependencyUpdate is the builder for updating TaskDependency entities.
type TaskDependencyUpdate struct {
	config
	hooks    []Hook
	mutation *TaskDependencyMutation
}

// Where appends a list predicates to the TaskDependencyUpdate builder.
func (_u *TaskDependencyUpdate) Where(ps ...predicate.TaskDependency) *TaskDependencyUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetTaskID sets the "task_id" field.
func (_u *TaskDependencyUpdate) SetTaskID(v uuid.UUID) *TaskDependencyUpdate {
	_u.mutation.SetTaskID(v)
	return _u
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (_u *TaskDependencyUpdate) SetNillableTaskID(v *uuid.UUID) *TaskDependencyUpdate {
	if v != nil {
		_u.SetTaskID(*v)
	}
	return _u
}

// SetDependsOnTaskID sets the "depends_on_task_id" field.
func (_u *TaskDependencyUpdate) SetDependsOnTaskID(v uuid.UUID) *TaskDependencyUpdate {
	_u.mutation.SetDependsOnTaskID(v)
	return _u
}

// SetNillableDependsOnTaskID sets the "depends_on_task_id" field if the given value is not nil.
func (_u *TaskDependencyUpdate) SetNillableDependsOnTaskID(v *uuid.UUID) *TaskDependencyUpdate {
	if v != nil {
		_u.SetDependsOnTaskID(*v)
	}
	return _u
}

// SetTask sets the "task" edge to the Task entity.
func (_u *TaskDependencyUpdate) SetTask(v *Task) *TaskDependencyUpdate {
	return _u.SetTaskID(v.ID)
}

// SetDependsOnTask sets the "depends_on_task" edge to the Task entity.
func (_u *TaskDependencyUpdate) SetDependsOnTask(v *Task) *TaskDependencyUpdate {
	return _u.SetDependsOnTaskID(v.ID)
}

// Mutation returns the TaskDependencyMutation object of the builder.
func (_u *TaskDependencyUpdate) Mutation() *TaskDependencyMutation {
	return _u.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (_u *TaskDependencyUpdate) ClearTask() *TaskDependencyUpdate {
	_u.mutation.ClearTask()
	return _u
}

// ClearDependsOnTask clears the "depends_on_task" edge to the Task entity.
func (_u *TaskDependencyUpdate) ClearDependsOnTask() *TaskDependencyUpdate {
	_u.mutation.ClearDependsOnTask()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *TaskDependencyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TaskDependencyUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *TaskDependencyUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TaskDependencyUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TaskDependencyUpdate) check() error {
	if _u.mutation.TaskCleared() && len(_u.mutation.TaskIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TaskDependency.task"`)
	}
	if _u.mutation.DependsOnTaskCleared() && len(_u.mutation.DependsOnTaskIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TaskDependency.depends_on_task"`)
	}
	return nil
}

func (_u *TaskDependencyUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(taskdependency.Table, taskdependency.Columns, sqlgraph.NewFieldSpec(taskdependency.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   taskdependency.TaskTable,
			Columns: []string{taskdependency.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   taskdependency.TaskTable,
			Columns: []string{taskdependency.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DependsOnTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   taskdependency.DependsOnTaskTable,
			Columns: []string{taskdependency.DependsOnTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DependsOnTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   taskdependency.DependsOnTaskTable,
			Columns: []string{taskdependency.DependsOnTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskdependency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// TaskDependencyUpdateOne is the builder for updating a single TaskDependency entity.
type TaskDependencyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskDependencyMutation
}

// SetTaskID sets the "task_id" field.
func (_u *TaskDependencyUpdateOne) SetTaskID(v uuid.UUID) *TaskDependencyUpdateOne {
	_u.mutation.SetTaskID(v)
	return _u
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (_u *TaskDependencyUpdateOne) SetNillableTaskID(v *uuid.UUID) *TaskDependencyUpdateOne {
	if v != nil {
		_u.SetTaskID(*v)
	}
	return _u
}

// SetDependsOnTaskID sets the "depends_on_task_id" field.
func (_u *TaskDependencyUpdateOne) SetDependsOnTaskID(v uuid.UUID) *TaskDependencyUpdateOne {
	_u.mutation.SetDependsOnTaskID(v)
	return _u
}

// SetNillableDependsOnTaskID sets the "depends_on_task_id" field if the given value is not nil.
func (_u *TaskDependencyUpdateOne) SetNillableDependsOnTaskID(v *uuid.UUID) *TaskDependencyUpdateOne {
	if v != nil {
		_u.SetDependsOnTaskID(*v)
	}
	return _u
}

// SetTask sets the "task" edge to the Task entity.
func (_u *TaskDependencyUpdateOne) SetTask(v *Task) *TaskDependencyUpdateOne {
	return _u.SetTaskID(v.ID)
}

// SetDependsOnTask sets the "depends_on_task" edge to the Task entity.
func (_u *TaskDependencyUpdateOne) SetDependsOnTask(v *Task) *TaskDependencyUpdateOne {
	return _u.SetDependsOnTaskID(v.ID)
}

// Mutation returns the TaskDependencyMutation object of the builder.
func (_u *TaskDependencyUpdateOne) Mutation() *TaskDependencyMutation {
	return _u.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (_u *TaskDependencyUpdateOne) ClearTask() *TaskDependencyUpdateOne {
	_u.mutation.ClearTask()
	return _u
}

// ClearDependsOnTask clears the "depends_on_task" edge to the Task entity.
func (_u *TaskDependencyUpdateOne) ClearDependsOnTask() *TaskDependencyUpdateOne {
	_u.mutation.ClearDependsOnTask()
	return _u
}

// Where appends a list predicates to the TaskDependencyUpdate builder.
func (_u *TaskDependencyUpdateOne) Where(ps ...predicate.TaskDependency) *TaskDependencyUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *TaskDependencyUpdateOne) Select(field string, fields ...string) *TaskDependencyUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated TaskDependency entity.
func (_u *TaskDependencyUpdateOne) Save(ctx context.Context) (*TaskDependency, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *TaskDependencyUpdateOne) SaveX(ctx context.Context) *TaskDependency {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *TaskDependencyUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *TaskDependencyUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *TaskDependencyUpdateOne) check() error {
	if _u.mutation.TaskCleared() && len(_u.mutation.TaskIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TaskDependency.task"`)
	}
	if _u.mutation.DependsOnTaskCleared() && len(_u.mutation.DependsOnTaskIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "TaskDependency.depends_on_task"`)
	}
	return nil
}

func (_u *TaskDependencyUpdateOne) sqlSave(ctx context.Context) (_node *TaskDependency, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(taskdependency.Table, taskdependency.Columns, sqlgraph.NewFieldSpec(taskdependency.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TaskDependency.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, taskdependency.FieldID)
		for _, f := range fields {
			if !taskdependency.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != taskdependency.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if _u.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   taskdependency.TaskTable,
			Columns: []string{taskdependency.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   taskdependency.TaskTable,
			Columns: []string{taskdependency.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.DependsOnTaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   taskdependency.DependsOnTaskTable,
			Columns: []string{taskdependency.DependsOnTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.DependsOnTaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   taskdependency.DependsOnTaskTable,
			Columns: []string{taskdependency.DependsOnTaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TaskDependency{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{taskdependency.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
