// Code generated by ent, DO NOT EDIT.

package taskdependency

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the taskdependency type in the database.
	Label = "task_dependency"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTaskID holds the string denoting the task_id field in the database.
	FieldTaskID = "task_id"
	// FieldDependsOnTaskID holds the string denoting the depends_on_task_id field in the database.
	FieldDependsOnTaskID = "depends_on_task_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeTask holds the string denoting the task edge name in mutations.
	EdgeTask = "task"
	// EdgeDependsOnTask holds the string denoting the depends_on_task edge name in mutations.
	EdgeDependsOnTask = "depends_on_task"
	// Table holds the table name of the taskdependency in the database.
	Table = "task_dependencies"
	// TaskTable is the table that holds the task relation/edge.
	TaskTable = "task_dependencies"
	// TaskInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TaskInverseTable = "tasks"
	// TaskColumn is the table column denoting the task relation/edge.
	TaskColumn = "task_id"
	// DependsOnTaskTable is the table that holds the depends_on_task relation/edge.
	DependsOnTaskTable = "task_dependencies"
	// DependsOnTaskInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	DependsOnTaskInverseTable = "tasks"
	// DependsOnTaskColumn is the table column denoting the depends_on_task relation/edge.
	DependsOnTaskColumn = "depends_on_task_id"
)

// Columns holds all SQL columns for taskdependency fields.
var Columns = []string{
	FieldID,
	FieldTaskID,
	FieldDependsOnTaskID,
	FieldCreatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the TaskDependency queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTaskID orders the results by the task_id field.
func ByTaskID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaskID, opts...).ToFunc()
}

// ByDependsOnTaskID orders the results by the depends_on_task_id field.
func ByDependsOnTaskID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDependsOnTaskID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByTaskField orders the results by task field.
func ByTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskStep(), sql.OrderByField(field, opts...))
	}
}

// ByDependsOnTaskField orders the results by depends_on_task field.
func ByDependsOnTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDependsOnTaskStep(), sql.OrderByField(field, opts...))
	}
}
func newTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, TaskTable, TaskColumn),
	)
}
func newDependsOnTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DependsOnTaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, DependsOnTaskTable, DependsOnTaskColumn),
	)
}
