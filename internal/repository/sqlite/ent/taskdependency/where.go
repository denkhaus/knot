// Code generated by ent, DO NOT EDIT.

package taskdependency

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/denkhaus/knot/internal/repository/sqlite/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.TaskDependency {
	return predicate.TaskDependency(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.TaskDependency {
	return predicate.TaskDependency(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.TaskDependency {
	return predicate.TaskDependency(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.TaskDependency {
	return predicate.TaskDependency(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.TaskDependency {
	return predicate.TaskDependency(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.TaskDependency {
	return predicate.TaskDependency(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.TaskDependency {
	return predicate.TaskDependency(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.TaskDependency {
	return predicate.TaskDependency(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.TaskDependency {
	return predicate.TaskDependency(sql.FieldLTE(FieldID, id))
}

// TaskID applies equality check predicate on the "task_id" field. It's identical to TaskIDEQ.
func TaskID(v uuid.UUID) predicate.TaskDependency {
	return predicate.TaskDependency(sql.FieldEQ(FieldTaskID, v))
}

// DependsOnTaskID applies equality check predicate on the "depends_on_task_id" field. It's identical to DependsOnTaskIDEQ.
func DependsOnTaskID(v uuid.UUID) predicate.TaskDependency {
	return predicate.TaskDependency(sql.FieldEQ(FieldDependsOnTaskID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TaskDependency {
	return predicate.TaskDependency(sql.FieldEQ(FieldCreatedAt, v))
}

// TaskIDEQ applies the EQ predicate on the "task_id" field.
func TaskIDEQ(v uuid.UUID) predicate.TaskDependency {
	return predicate.TaskDependency(sql.FieldEQ(FieldTaskID, v))
}

// TaskIDNEQ applies the NEQ predicate on the "task_id" field.
func TaskIDNEQ(v uuid.UUID) predicate.TaskDependency {
	return predicate.TaskDependency(sql.FieldNEQ(FieldTaskID, v))
}

// TaskIDIn applies the In predicate on the "task_id" field.
func TaskIDIn(vs ...uuid.UUID) predicate.TaskDependency {
	return predicate.TaskDependency(sql.FieldIn(FieldTaskID, vs...))
}

// TaskIDNotIn applies the NotIn predicate on the "task_id" field.
func TaskIDNotIn(vs ...uuid.UUID) predicate.TaskDependency {
	return predicate.TaskDependency(sql.FieldNotIn(FieldTaskID, vs...))
}

// DependsOnTaskIDEQ applies the EQ predicate on the "depends_on_task_id" field.
func DependsOnTaskIDEQ(v uuid.UUID) predicate.TaskDependency {
	return predicate.TaskDependency(sql.FieldEQ(FieldDependsOnTaskID, v))
}

// DependsOnTaskIDNEQ applies the NEQ predicate on the "depends_on_task_id" field.
func DependsOnTaskIDNEQ(v uuid.UUID) predicate.TaskDependency {
	return predicate.TaskDependency(sql.FieldNEQ(FieldDependsOnTaskID, v))
}

// DependsOnTaskIDIn applies the In predicate on the "depends_on_task_id" field.
func DependsOnTaskIDIn(vs ...uuid.UUID) predicate.TaskDependency {
	return predicate.TaskDependency(sql.FieldIn(FieldDependsOnTaskID, vs...))
}

// DependsOnTaskIDNotIn applies the NotIn predicate on the "depends_on_task_id" field.
func DependsOnTaskIDNotIn(vs ...uuid.UUID) predicate.TaskDependency {
	return predicate.TaskDependency(sql.FieldNotIn(FieldDependsOnTaskID, vs...))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TaskDependency {
	return predicate.TaskDependency(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TaskDependency {
	return predicate.TaskDependency(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TaskDependency {
	return predicate.TaskDependency(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TaskDependency {
	return predicate.TaskDependency(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TaskDependency {
	return predicate.TaskDependency(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TaskDependency {
	return predicate.TaskDependency(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TaskDependency {
	return predicate.TaskDependency(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TaskDependency {
	return predicate.TaskDependency(sql.FieldLTE(FieldCreatedAt, v))
}

// HasTask applies the HasEdge predicate on the "task" edge.
func HasTask() predicate.TaskDependency {
	return predicate.TaskDependency(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, TaskTable, TaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskWith applies the HasEdge predicate on the "task" edge with a given conditions (other predicates).
func HasTaskWith(preds ...predicate.Task) predicate.TaskDependency {
	return predicate.TaskDependency(func(s *sql.Selector) {
		step := newTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDependsOnTask applies the HasEdge predicate on the "depends_on_task" edge.
func HasDependsOnTask() predicate.TaskDependency {
	return predicate.TaskDependency(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, DependsOnTaskTable, DependsOnTaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDependsOnTaskWith applies the HasEdge predicate on the "depends_on_task" edge with a given conditions (other predicates).
func HasDependsOnTaskWith(preds ...predicate.Task) predicate.TaskDependency {
	return predicate.TaskDependency(func(s *sql.Selector) {
		step := newDependsOnTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TaskDependency) predicate.TaskDependency {
	return predicate.TaskDependency(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TaskDependency) predicate.TaskDependency {
	return predicate.TaskDependency(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TaskDependency) predicate.TaskDependency {
	return predicate.TaskDependency(sql.NotPredicates(p))
}
