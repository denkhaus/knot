// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/denkhaus/knot/internal/repository/sqlite/ent/project"
	"github.com/denkhaus/knot/internal/repository/sqlite/ent/projectcontext"
	"github.com/google/uuid"
)

// ProjectContextCreate is the builder for creating a ProjectContext entity.
type ProjectContextCreate struct {
	config
	mutation *ProjectContextMutation
	hooks    []Hook
}

// SetSelectedProjectID sets the "selected_project_id" field.
func (_c *ProjectContextCreate) SetSelectedProjectID(v uuid.UUID) *ProjectContextCreate {
	_c.mutation.SetSelectedProjectID(v)
	return _c
}

// SetNillableSelectedProjectID sets the "selected_project_id" field if the given value is not nil.
func (_c *ProjectContextCreate) SetNillableSelectedProjectID(v *uuid.UUID) *ProjectContextCreate {
	if v != nil {
		_c.SetSelectedProjectID(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *ProjectContextCreate) SetUpdatedAt(v time.Time) *ProjectContextCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *ProjectContextCreate) SetNillableUpdatedAt(v *time.Time) *ProjectContextCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetUpdatedBy sets the "updated_by" field.
func (_c *ProjectContextCreate) SetUpdatedBy(v string) *ProjectContextCreate {
	_c.mutation.SetUpdatedBy(v)
	return _c
}

// SetID sets the "id" field.
func (_c *ProjectContextCreate) SetID(v int) *ProjectContextCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetSelectedProject sets the "selected_project" edge to the Project entity.
func (_c *ProjectContextCreate) SetSelectedProject(v *Project) *ProjectContextCreate {
	return _c.SetSelectedProjectID(v.ID)
}

// Mutation returns the ProjectContextMutation object of the builder.
func (_c *ProjectContextCreate) Mutation() *ProjectContextMutation {
	return _c.mutation
}

// Save creates the ProjectContext in the database.
func (_c *ProjectContextCreate) Save(ctx context.Context) (*ProjectContext, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *ProjectContextCreate) SaveX(ctx context.Context) *ProjectContext {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ProjectContextCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ProjectContextCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *ProjectContextCreate) defaults() {
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := projectcontext.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *ProjectContextCreate) check() error {
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "ProjectContext.updated_at"`)}
	}
	if _, ok := _c.mutation.UpdatedBy(); !ok {
		return &ValidationError{Name: "updated_by", err: errors.New(`ent: missing required field "ProjectContext.updated_by"`)}
	}
	if v, ok := _c.mutation.UpdatedBy(); ok {
		if err := projectcontext.UpdatedByValidator(v); err != nil {
			return &ValidationError{Name: "updated_by", err: fmt.Errorf(`ent: validator failed for field "ProjectContext.updated_by": %w`, err)}
		}
	}
	return nil
}

func (_c *ProjectContextCreate) sqlSave(ctx context.Context) (*ProjectContext, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *ProjectContextCreate) createSpec() (*ProjectContext, *sqlgraph.CreateSpec) {
	var (
		_node = &ProjectContext{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(projectcontext.Table, sqlgraph.NewFieldSpec(projectcontext.FieldID, field.TypeInt))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(projectcontext.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := _c.mutation.UpdatedBy(); ok {
		_spec.SetField(projectcontext.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if nodes := _c.mutation.SelectedProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   projectcontext.SelectedProjectTable,
			Columns: []string{projectcontext.SelectedProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.SelectedProjectID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProjectContextCreateBulk is the builder for creating many ProjectContext entities in bulk.
type ProjectContextCreateBulk struct {
	config
	err      error
	builders []*ProjectContextCreate
}

// Save creates the ProjectContext entities in the database.
func (_c *ProjectContextCreateBulk) Save(ctx context.Context) ([]*ProjectContext, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*ProjectContext, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectContextMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *ProjectContextCreateBulk) SaveX(ctx context.Context) []*ProjectContext {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *ProjectContextCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *ProjectContextCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
