// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/denkhaus/knot/internal/repository/sqlite/ent/predicate"
	"github.com/denkhaus/knot/internal/repository/sqlite/ent/project"
	"github.com/denkhaus/knot/internal/repository/sqlite/ent/task"
	"github.com/google/uuid"
)

// ProjectUpdate is the builder for updating Project entities.
type ProjectUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectMutation
}

// Where appends a list predicates to the ProjectUpdate builder.
func (_u *ProjectUpdate) Where(ps ...predicate.Project) *ProjectUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetTitle sets the "title" field.
func (_u *ProjectUpdate) SetTitle(v string) *ProjectUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *ProjectUpdate) SetNillableTitle(v *string) *ProjectUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *ProjectUpdate) SetDescription(v string) *ProjectUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ProjectUpdate) SetNillableDescription(v *string) *ProjectUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *ProjectUpdate) ClearDescription() *ProjectUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetState sets the "state" field.
func (_u *ProjectUpdate) SetState(v project.State) *ProjectUpdate {
	_u.mutation.SetState(v)
	return _u
}

// SetNillableState sets the "state" field if the given value is not nil.
func (_u *ProjectUpdate) SetNillableState(v *project.State) *ProjectUpdate {
	if v != nil {
		_u.SetState(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ProjectUpdate) SetUpdatedAt(v time.Time) *ProjectUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetTotalTasks sets the "total_tasks" field.
func (_u *ProjectUpdate) SetTotalTasks(v int) *ProjectUpdate {
	_u.mutation.ResetTotalTasks()
	_u.mutation.SetTotalTasks(v)
	return _u
}

// SetNillableTotalTasks sets the "total_tasks" field if the given value is not nil.
func (_u *ProjectUpdate) SetNillableTotalTasks(v *int) *ProjectUpdate {
	if v != nil {
		_u.SetTotalTasks(*v)
	}
	return _u
}

// AddTotalTasks adds value to the "total_tasks" field.
func (_u *ProjectUpdate) AddTotalTasks(v int) *ProjectUpdate {
	_u.mutation.AddTotalTasks(v)
	return _u
}

// SetCompletedTasks sets the "completed_tasks" field.
func (_u *ProjectUpdate) SetCompletedTasks(v int) *ProjectUpdate {
	_u.mutation.ResetCompletedTasks()
	_u.mutation.SetCompletedTasks(v)
	return _u
}

// SetNillableCompletedTasks sets the "completed_tasks" field if the given value is not nil.
func (_u *ProjectUpdate) SetNillableCompletedTasks(v *int) *ProjectUpdate {
	if v != nil {
		_u.SetCompletedTasks(*v)
	}
	return _u
}

// AddCompletedTasks adds value to the "completed_tasks" field.
func (_u *ProjectUpdate) AddCompletedTasks(v int) *ProjectUpdate {
	_u.mutation.AddCompletedTasks(v)
	return _u
}

// SetProgress sets the "progress" field.
func (_u *ProjectUpdate) SetProgress(v float64) *ProjectUpdate {
	_u.mutation.ResetProgress()
	_u.mutation.SetProgress(v)
	return _u
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (_u *ProjectUpdate) SetNillableProgress(v *float64) *ProjectUpdate {
	if v != nil {
		_u.SetProgress(*v)
	}
	return _u
}

// AddProgress adds value to the "progress" field.
func (_u *ProjectUpdate) AddProgress(v float64) *ProjectUpdate {
	_u.mutation.AddProgress(v)
	return _u
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (_u *ProjectUpdate) AddTaskIDs(ids ...uuid.UUID) *ProjectUpdate {
	_u.mutation.AddTaskIDs(ids...)
	return _u
}

// AddTasks adds the "tasks" edges to the Task entity.
func (_u *ProjectUpdate) AddTasks(v ...*Task) *ProjectUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTaskIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (_u *ProjectUpdate) Mutation() *ProjectMutation {
	return _u.mutation
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (_u *ProjectUpdate) ClearTasks() *ProjectUpdate {
	_u.mutation.ClearTasks()
	return _u
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (_u *ProjectUpdate) RemoveTaskIDs(ids ...uuid.UUID) *ProjectUpdate {
	_u.mutation.RemoveTaskIDs(ids...)
	return _u
}

// RemoveTasks removes "tasks" edges to Task entities.
func (_u *ProjectUpdate) RemoveTasks(v ...*Task) *ProjectUpdate {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTaskIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ProjectUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ProjectUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProjectUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ProjectUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := project.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProjectUpdate) check() error {
	if v, ok := _u.mutation.Title(); ok {
		if err := project.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Project.title": %w`, err)}
		}
	}
	if v, ok := _u.mutation.State(); ok {
		if err := project.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Project.state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TotalTasks(); ok {
		if err := project.TotalTasksValidator(v); err != nil {
			return &ValidationError{Name: "total_tasks", err: fmt.Errorf(`ent: validator failed for field "Project.total_tasks": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CompletedTasks(); ok {
		if err := project.CompletedTasksValidator(v); err != nil {
			return &ValidationError{Name: "completed_tasks", err: fmt.Errorf(`ent: validator failed for field "Project.completed_tasks": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Progress(); ok {
		if err := project.ProgressValidator(v); err != nil {
			return &ValidationError{Name: "progress", err: fmt.Errorf(`ent: validator failed for field "Project.progress": %w`, err)}
		}
	}
	return nil
}

func (_u *ProjectUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(project.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(project.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(project.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.State(); ok {
		_spec.SetField(project.FieldState, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.TotalTasks(); ok {
		_spec.SetField(project.FieldTotalTasks, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedTotalTasks(); ok {
		_spec.AddField(project.FieldTotalTasks, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CompletedTasks(); ok {
		_spec.SetField(project.FieldCompletedTasks, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCompletedTasks(); ok {
		_spec.AddField(project.FieldCompletedTasks, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Progress(); ok {
		_spec.SetField(project.FieldProgress, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedProgress(); ok {
		_spec.AddField(project.FieldProgress, field.TypeFloat64, value)
	}
	if _u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.TasksTable,
			Columns: []string{project.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTasksIDs(); len(nodes) > 0 && !_u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.TasksTable,
			Columns: []string{project.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.TasksTable,
			Columns: []string{project.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ProjectUpdateOne is the builder for updating a single Project entity.
type ProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectMutation
}

// SetTitle sets the "title" field.
func (_u *ProjectUpdateOne) SetTitle(v string) *ProjectUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *ProjectUpdateOne) SetNillableTitle(v *string) *ProjectUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *ProjectUpdateOne) SetDescription(v string) *ProjectUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *ProjectUpdateOne) SetNillableDescription(v *string) *ProjectUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *ProjectUpdateOne) ClearDescription() *ProjectUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetState sets the "state" field.
func (_u *ProjectUpdateOne) SetState(v project.State) *ProjectUpdateOne {
	_u.mutation.SetState(v)
	return _u
}

// SetNillableState sets the "state" field if the given value is not nil.
func (_u *ProjectUpdateOne) SetNillableState(v *project.State) *ProjectUpdateOne {
	if v != nil {
		_u.SetState(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *ProjectUpdateOne) SetUpdatedAt(v time.Time) *ProjectUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetTotalTasks sets the "total_tasks" field.
func (_u *ProjectUpdateOne) SetTotalTasks(v int) *ProjectUpdateOne {
	_u.mutation.ResetTotalTasks()
	_u.mutation.SetTotalTasks(v)
	return _u
}

// SetNillableTotalTasks sets the "total_tasks" field if the given value is not nil.
func (_u *ProjectUpdateOne) SetNillableTotalTasks(v *int) *ProjectUpdateOne {
	if v != nil {
		_u.SetTotalTasks(*v)
	}
	return _u
}

// AddTotalTasks adds value to the "total_tasks" field.
func (_u *ProjectUpdateOne) AddTotalTasks(v int) *ProjectUpdateOne {
	_u.mutation.AddTotalTasks(v)
	return _u
}

// SetCompletedTasks sets the "completed_tasks" field.
func (_u *ProjectUpdateOne) SetCompletedTasks(v int) *ProjectUpdateOne {
	_u.mutation.ResetCompletedTasks()
	_u.mutation.SetCompletedTasks(v)
	return _u
}

// SetNillableCompletedTasks sets the "completed_tasks" field if the given value is not nil.
func (_u *ProjectUpdateOne) SetNillableCompletedTasks(v *int) *ProjectUpdateOne {
	if v != nil {
		_u.SetCompletedTasks(*v)
	}
	return _u
}

// AddCompletedTasks adds value to the "completed_tasks" field.
func (_u *ProjectUpdateOne) AddCompletedTasks(v int) *ProjectUpdateOne {
	_u.mutation.AddCompletedTasks(v)
	return _u
}

// SetProgress sets the "progress" field.
func (_u *ProjectUpdateOne) SetProgress(v float64) *ProjectUpdateOne {
	_u.mutation.ResetProgress()
	_u.mutation.SetProgress(v)
	return _u
}

// SetNillableProgress sets the "progress" field if the given value is not nil.
func (_u *ProjectUpdateOne) SetNillableProgress(v *float64) *ProjectUpdateOne {
	if v != nil {
		_u.SetProgress(*v)
	}
	return _u
}

// AddProgress adds value to the "progress" field.
func (_u *ProjectUpdateOne) AddProgress(v float64) *ProjectUpdateOne {
	_u.mutation.AddProgress(v)
	return _u
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (_u *ProjectUpdateOne) AddTaskIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	_u.mutation.AddTaskIDs(ids...)
	return _u
}

// AddTasks adds the "tasks" edges to the Task entity.
func (_u *ProjectUpdateOne) AddTasks(v ...*Task) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddTaskIDs(ids...)
}

// Mutation returns the ProjectMutation object of the builder.
func (_u *ProjectUpdateOne) Mutation() *ProjectMutation {
	return _u.mutation
}

// ClearTasks clears all "tasks" edges to the Task entity.
func (_u *ProjectUpdateOne) ClearTasks() *ProjectUpdateOne {
	_u.mutation.ClearTasks()
	return _u
}

// RemoveTaskIDs removes the "tasks" edge to Task entities by IDs.
func (_u *ProjectUpdateOne) RemoveTaskIDs(ids ...uuid.UUID) *ProjectUpdateOne {
	_u.mutation.RemoveTaskIDs(ids...)
	return _u
}

// RemoveTasks removes "tasks" edges to Task entities.
func (_u *ProjectUpdateOne) RemoveTasks(v ...*Task) *ProjectUpdateOne {
	ids := make([]uuid.UUID, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveTaskIDs(ids...)
}

// Where appends a list predicates to the ProjectUpdate builder.
func (_u *ProjectUpdateOne) Where(ps ...predicate.Project) *ProjectUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ProjectUpdateOne) Select(field string, fields ...string) *ProjectUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Project entity.
func (_u *ProjectUpdateOne) Save(ctx context.Context) (*Project, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProjectUpdateOne) SaveX(ctx context.Context) *Project {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProjectUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *ProjectUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := project.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProjectUpdateOne) check() error {
	if v, ok := _u.mutation.Title(); ok {
		if err := project.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Project.title": %w`, err)}
		}
	}
	if v, ok := _u.mutation.State(); ok {
		if err := project.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf(`ent: validator failed for field "Project.state": %w`, err)}
		}
	}
	if v, ok := _u.mutation.TotalTasks(); ok {
		if err := project.TotalTasksValidator(v); err != nil {
			return &ValidationError{Name: "total_tasks", err: fmt.Errorf(`ent: validator failed for field "Project.total_tasks": %w`, err)}
		}
	}
	if v, ok := _u.mutation.CompletedTasks(); ok {
		if err := project.CompletedTasksValidator(v); err != nil {
			return &ValidationError{Name: "completed_tasks", err: fmt.Errorf(`ent: validator failed for field "Project.completed_tasks": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Progress(); ok {
		if err := project.ProgressValidator(v); err != nil {
			return &ValidationError{Name: "progress", err: fmt.Errorf(`ent: validator failed for field "Project.progress": %w`, err)}
		}
	}
	return nil
}

func (_u *ProjectUpdateOne) sqlSave(ctx context.Context) (_node *Project, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(project.Table, project.Columns, sqlgraph.NewFieldSpec(project.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Project.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, project.FieldID)
		for _, f := range fields {
			if !project.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != project.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(project.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(project.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(project.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.State(); ok {
		_spec.SetField(project.FieldState, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(project.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.TotalTasks(); ok {
		_spec.SetField(project.FieldTotalTasks, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedTotalTasks(); ok {
		_spec.AddField(project.FieldTotalTasks, field.TypeInt, value)
	}
	if value, ok := _u.mutation.CompletedTasks(); ok {
		_spec.SetField(project.FieldCompletedTasks, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedCompletedTasks(); ok {
		_spec.AddField(project.FieldCompletedTasks, field.TypeInt, value)
	}
	if value, ok := _u.mutation.Progress(); ok {
		_spec.SetField(project.FieldProgress, field.TypeFloat64, value)
	}
	if value, ok := _u.mutation.AddedProgress(); ok {
		_spec.AddField(project.FieldProgress, field.TypeFloat64, value)
	}
	if _u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.TasksTable,
			Columns: []string{project.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedTasksIDs(); len(nodes) > 0 && !_u.mutation.TasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.TasksTable,
			Columns: []string{project.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   project.TasksTable,
			Columns: []string{project.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Project{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{project.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
