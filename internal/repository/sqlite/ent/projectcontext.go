// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/denkhaus/knot/internal/repository/sqlite/ent/project"
	"github.com/denkhaus/knot/internal/repository/sqlite/ent/projectcontext"
	"github.com/google/uuid"
)

// ProjectContext is the model entity for the ProjectContext schema.
type ProjectContext struct {
	config `json:"-"`
	// ID of the ent.
	// Primary key - should always be 1 (singleton)
	ID int `json:"id,omitempty"`
	// Currently selected project ID
	SelectedProjectID uuid.UUID `json:"selected_project_id,omitempty"`
	// When the selection was last updated
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Who updated the selection
	UpdatedBy string `json:"updated_by,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectContextQuery when eager-loading is set.
	Edges        ProjectContextEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ProjectContextEdges holds the relations/edges for other nodes in the graph.
type ProjectContextEdges struct {
	// SelectedProject holds the value of the selected_project edge.
	SelectedProject *Project `json:"selected_project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// SelectedProjectOrErr returns the SelectedProject value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectContextEdges) SelectedProjectOrErr() (*Project, error) {
	if e.SelectedProject != nil {
		return e.SelectedProject, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "selected_project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectContext) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case projectcontext.FieldID:
			values[i] = new(sql.NullInt64)
		case projectcontext.FieldUpdatedBy:
			values[i] = new(sql.NullString)
		case projectcontext.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case projectcontext.FieldSelectedProjectID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectContext fields.
func (_m *ProjectContext) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projectcontext.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case projectcontext.FieldSelectedProjectID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field selected_project_id", values[i])
			} else if value != nil {
				_m.SelectedProjectID = *value
			}
		case projectcontext.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				_m.UpdatedAt = value.Time
			}
		case projectcontext.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				_m.UpdatedBy = value.String
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProjectContext.
// This includes values selected through modifiers, order, etc.
func (_m *ProjectContext) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QuerySelectedProject queries the "selected_project" edge of the ProjectContext entity.
func (_m *ProjectContext) QuerySelectedProject() *ProjectQuery {
	return NewProjectContextClient(_m.config).QuerySelectedProject(_m)
}

// Update returns a builder for updating this ProjectContext.
// Note that you need to call ProjectContext.Unwrap() before calling this method if this ProjectContext
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *ProjectContext) Update() *ProjectContextUpdateOne {
	return NewProjectContextClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the ProjectContext entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *ProjectContext) Unwrap() *ProjectContext {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProjectContext is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *ProjectContext) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectContext(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("selected_project_id=")
	builder.WriteString(fmt.Sprintf("%v", _m.SelectedProjectID))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(_m.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(_m.UpdatedBy)
	builder.WriteByte(')')
	return builder.String()
}

// ProjectContexts is a parsable slice of ProjectContext.
type ProjectContexts []*ProjectContext
