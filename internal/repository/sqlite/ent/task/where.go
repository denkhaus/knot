// Code generated by ent, DO NOT EDIT.

package task

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/denkhaus/knot/internal/repository/sqlite/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldID, id))
}

// ProjectID applies equality check predicate on the "project_id" field. It's identical to ProjectIDEQ.
func ProjectID(v uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldProjectID, v))
}

// ParentID applies equality check predicate on the "parent_id" field. It's identical to ParentIDEQ.
func ParentID(v uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldParentID, v))
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTitle, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDescription, v))
}

// Complexity applies equality check predicate on the "complexity" field. It's identical to ComplexityEQ.
func Complexity(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldComplexity, v))
}

// Depth applies equality check predicate on the "depth" field. It's identical to DepthEQ.
func Depth(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDepth, v))
}

// Estimate applies equality check predicate on the "estimate" field. It's identical to EstimateEQ.
func Estimate(v int64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldEstimate, v))
}

// AssignedAgent applies equality check predicate on the "assigned_agent" field. It's identical to AssignedAgentEQ.
func AssignedAgent(v uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAssignedAgent, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUpdatedAt, v))
}

// CompletedAt applies equality check predicate on the "completed_at" field. It's identical to CompletedAtEQ.
func CompletedAt(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCompletedAt, v))
}

// ProjectIDEQ applies the EQ predicate on the "project_id" field.
func ProjectIDEQ(v uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldProjectID, v))
}

// ProjectIDNEQ applies the NEQ predicate on the "project_id" field.
func ProjectIDNEQ(v uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldProjectID, v))
}

// ProjectIDIn applies the In predicate on the "project_id" field.
func ProjectIDIn(vs ...uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldProjectID, vs...))
}

// ProjectIDNotIn applies the NotIn predicate on the "project_id" field.
func ProjectIDNotIn(vs ...uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldProjectID, vs...))
}

// ParentIDEQ applies the EQ predicate on the "parent_id" field.
func ParentIDEQ(v uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldParentID, v))
}

// ParentIDNEQ applies the NEQ predicate on the "parent_id" field.
func ParentIDNEQ(v uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldParentID, v))
}

// ParentIDIn applies the In predicate on the "parent_id" field.
func ParentIDIn(vs ...uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldParentID, vs...))
}

// ParentIDNotIn applies the NotIn predicate on the "parent_id" field.
func ParentIDNotIn(vs ...uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldParentID, vs...))
}

// ParentIDIsNil applies the IsNil predicate on the "parent_id" field.
func ParentIDIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldParentID))
}

// ParentIDNotNil applies the NotNil predicate on the "parent_id" field.
func ParentIDNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldParentID))
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldTitle, v))
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldTitle, v))
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldTitle, vs...))
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldTitle, vs...))
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldTitle, v))
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldTitle, v))
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldTitle, v))
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldTitle, v))
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldTitle, v))
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldTitle, v))
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldTitle, v))
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldTitle, v))
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldTitle, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldDescription, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v State) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v State) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...State) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...State) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldState, vs...))
}

// PriorityEQ applies the EQ predicate on the "priority" field.
func PriorityEQ(v Priority) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldPriority, v))
}

// PriorityNEQ applies the NEQ predicate on the "priority" field.
func PriorityNEQ(v Priority) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldPriority, v))
}

// PriorityIn applies the In predicate on the "priority" field.
func PriorityIn(vs ...Priority) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldPriority, vs...))
}

// PriorityNotIn applies the NotIn predicate on the "priority" field.
func PriorityNotIn(vs ...Priority) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldPriority, vs...))
}

// ComplexityEQ applies the EQ predicate on the "complexity" field.
func ComplexityEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldComplexity, v))
}

// ComplexityNEQ applies the NEQ predicate on the "complexity" field.
func ComplexityNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldComplexity, v))
}

// ComplexityIn applies the In predicate on the "complexity" field.
func ComplexityIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldComplexity, vs...))
}

// ComplexityNotIn applies the NotIn predicate on the "complexity" field.
func ComplexityNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldComplexity, vs...))
}

// ComplexityGT applies the GT predicate on the "complexity" field.
func ComplexityGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldComplexity, v))
}

// ComplexityGTE applies the GTE predicate on the "complexity" field.
func ComplexityGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldComplexity, v))
}

// ComplexityLT applies the LT predicate on the "complexity" field.
func ComplexityLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldComplexity, v))
}

// ComplexityLTE applies the LTE predicate on the "complexity" field.
func ComplexityLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldComplexity, v))
}

// DepthEQ applies the EQ predicate on the "depth" field.
func DepthEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldDepth, v))
}

// DepthNEQ applies the NEQ predicate on the "depth" field.
func DepthNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldDepth, v))
}

// DepthIn applies the In predicate on the "depth" field.
func DepthIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldDepth, vs...))
}

// DepthNotIn applies the NotIn predicate on the "depth" field.
func DepthNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldDepth, vs...))
}

// DepthGT applies the GT predicate on the "depth" field.
func DepthGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldDepth, v))
}

// DepthGTE applies the GTE predicate on the "depth" field.
func DepthGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldDepth, v))
}

// DepthLT applies the LT predicate on the "depth" field.
func DepthLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldDepth, v))
}

// DepthLTE applies the LTE predicate on the "depth" field.
func DepthLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldDepth, v))
}

// EstimateEQ applies the EQ predicate on the "estimate" field.
func EstimateEQ(v int64) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldEstimate, v))
}

// EstimateNEQ applies the NEQ predicate on the "estimate" field.
func EstimateNEQ(v int64) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldEstimate, v))
}

// EstimateIn applies the In predicate on the "estimate" field.
func EstimateIn(vs ...int64) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldEstimate, vs...))
}

// EstimateNotIn applies the NotIn predicate on the "estimate" field.
func EstimateNotIn(vs ...int64) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldEstimate, vs...))
}

// EstimateGT applies the GT predicate on the "estimate" field.
func EstimateGT(v int64) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldEstimate, v))
}

// EstimateGTE applies the GTE predicate on the "estimate" field.
func EstimateGTE(v int64) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldEstimate, v))
}

// EstimateLT applies the LT predicate on the "estimate" field.
func EstimateLT(v int64) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldEstimate, v))
}

// EstimateLTE applies the LTE predicate on the "estimate" field.
func EstimateLTE(v int64) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldEstimate, v))
}

// EstimateIsNil applies the IsNil predicate on the "estimate" field.
func EstimateIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldEstimate))
}

// EstimateNotNil applies the NotNil predicate on the "estimate" field.
func EstimateNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldEstimate))
}

// AssignedAgentEQ applies the EQ predicate on the "assigned_agent" field.
func AssignedAgentEQ(v uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAssignedAgent, v))
}

// AssignedAgentNEQ applies the NEQ predicate on the "assigned_agent" field.
func AssignedAgentNEQ(v uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAssignedAgent, v))
}

// AssignedAgentIn applies the In predicate on the "assigned_agent" field.
func AssignedAgentIn(vs ...uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldAssignedAgent, vs...))
}

// AssignedAgentNotIn applies the NotIn predicate on the "assigned_agent" field.
func AssignedAgentNotIn(vs ...uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldAssignedAgent, vs...))
}

// AssignedAgentGT applies the GT predicate on the "assigned_agent" field.
func AssignedAgentGT(v uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldAssignedAgent, v))
}

// AssignedAgentGTE applies the GTE predicate on the "assigned_agent" field.
func AssignedAgentGTE(v uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldAssignedAgent, v))
}

// AssignedAgentLT applies the LT predicate on the "assigned_agent" field.
func AssignedAgentLT(v uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldAssignedAgent, v))
}

// AssignedAgentLTE applies the LTE predicate on the "assigned_agent" field.
func AssignedAgentLTE(v uuid.UUID) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldAssignedAgent, v))
}

// AssignedAgentIsNil applies the IsNil predicate on the "assigned_agent" field.
func AssignedAgentIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldAssignedAgent))
}

// AssignedAgentNotNil applies the NotNil predicate on the "assigned_agent" field.
func AssignedAgentNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldAssignedAgent))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldUpdatedAt, v))
}

// CompletedAtEQ applies the EQ predicate on the "completed_at" field.
func CompletedAtEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldCompletedAt, v))
}

// CompletedAtNEQ applies the NEQ predicate on the "completed_at" field.
func CompletedAtNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldCompletedAt, v))
}

// CompletedAtIn applies the In predicate on the "completed_at" field.
func CompletedAtIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldCompletedAt, vs...))
}

// CompletedAtNotIn applies the NotIn predicate on the "completed_at" field.
func CompletedAtNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldCompletedAt, vs...))
}

// CompletedAtGT applies the GT predicate on the "completed_at" field.
func CompletedAtGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldCompletedAt, v))
}

// CompletedAtGTE applies the GTE predicate on the "completed_at" field.
func CompletedAtGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldCompletedAt, v))
}

// CompletedAtLT applies the LT predicate on the "completed_at" field.
func CompletedAtLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldCompletedAt, v))
}

// CompletedAtLTE applies the LTE predicate on the "completed_at" field.
func CompletedAtLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldCompletedAt, v))
}

// CompletedAtIsNil applies the IsNil predicate on the "completed_at" field.
func CompletedAtIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldCompletedAt))
}

// CompletedAtNotNil applies the NotNil predicate on the "completed_at" field.
func CompletedAtNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldCompletedAt))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasParent applies the HasEdge predicate on the "parent" edge.
func HasParent() predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ParentTable, ParentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasParentWith applies the HasEdge predicate on the "parent" edge with a given conditions (other predicates).
func HasParentWith(preds ...predicate.Task) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := newParentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasChildren applies the HasEdge predicate on the "children" edge.
func HasChildren() predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, ChildrenTable, ChildrenColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChildrenWith applies the HasEdge predicate on the "children" edge with a given conditions (other predicates).
func HasChildrenWith(preds ...predicate.Task) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := newChildrenStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Task) predicate.Task {
	return predicate.Task(sql.NotPredicates(p))
}
