// Code generated by ent, DO NOT EDIT.

package projectcontext

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/denkhaus/knot/internal/repository/sqlite/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldLTE(FieldID, id))
}

// SelectedProjectID applies equality check predicate on the "selected_project_id" field. It's identical to SelectedProjectIDEQ.
func SelectedProjectID(v uuid.UUID) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldEQ(FieldSelectedProjectID, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldEQ(FieldUpdatedBy, v))
}

// SelectedProjectIDEQ applies the EQ predicate on the "selected_project_id" field.
func SelectedProjectIDEQ(v uuid.UUID) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldEQ(FieldSelectedProjectID, v))
}

// SelectedProjectIDNEQ applies the NEQ predicate on the "selected_project_id" field.
func SelectedProjectIDNEQ(v uuid.UUID) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldNEQ(FieldSelectedProjectID, v))
}

// SelectedProjectIDIn applies the In predicate on the "selected_project_id" field.
func SelectedProjectIDIn(vs ...uuid.UUID) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldIn(FieldSelectedProjectID, vs...))
}

// SelectedProjectIDNotIn applies the NotIn predicate on the "selected_project_id" field.
func SelectedProjectIDNotIn(vs ...uuid.UUID) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldNotIn(FieldSelectedProjectID, vs...))
}

// SelectedProjectIDIsNil applies the IsNil predicate on the "selected_project_id" field.
func SelectedProjectIDIsNil() predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldIsNull(FieldSelectedProjectID))
}

// SelectedProjectIDNotNil applies the NotNil predicate on the "selected_project_id" field.
func SelectedProjectIDNotNil() predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldNotNull(FieldSelectedProjectID))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.ProjectContext {
	return predicate.ProjectContext(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// HasSelectedProject applies the HasEdge predicate on the "selected_project" edge.
func HasSelectedProject() predicate.ProjectContext {
	return predicate.ProjectContext(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, SelectedProjectTable, SelectedProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSelectedProjectWith applies the HasEdge predicate on the "selected_project" edge with a given conditions (other predicates).
func HasSelectedProjectWith(preds ...predicate.Project) predicate.ProjectContext {
	return predicate.ProjectContext(func(s *sql.Selector) {
		step := newSelectedProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProjectContext) predicate.ProjectContext {
	return predicate.ProjectContext(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProjectContext) predicate.ProjectContext {
	return predicate.ProjectContext(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProjectContext) predicate.ProjectContext {
	return predicate.ProjectContext(sql.NotPredicates(p))
}
