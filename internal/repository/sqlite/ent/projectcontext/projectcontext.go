// Code generated by ent, DO NOT EDIT.

package projectcontext

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the projectcontext type in the database.
	Label = "project_context"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSelectedProjectID holds the string denoting the selected_project_id field in the database.
	FieldSelectedProjectID = "selected_project_id"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// EdgeSelectedProject holds the string denoting the selected_project edge name in mutations.
	EdgeSelectedProject = "selected_project"
	// Table holds the table name of the projectcontext in the database.
	Table = "project_contexts"
	// SelectedProjectTable is the table that holds the selected_project relation/edge.
	SelectedProjectTable = "project_contexts"
	// SelectedProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	SelectedProjectInverseTable = "projects"
	// SelectedProjectColumn is the table column denoting the selected_project relation/edge.
	SelectedProjectColumn = "selected_project_id"
)

// Columns holds all SQL columns for projectcontext fields.
var Columns = []string{
	FieldID,
	FieldSelectedProjectID,
	FieldUpdatedAt,
	FieldUpdatedBy,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// UpdatedByValidator is a validator for the "updated_by" field. It is called by the builders before save.
	UpdatedByValidator func(string) error
)

// OrderOption defines the ordering options for the ProjectContext queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySelectedProjectID orders the results by the selected_project_id field.
func BySelectedProjectID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSelectedProjectID, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// BySelectedProjectField orders the results by selected_project field.
func BySelectedProjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSelectedProjectStep(), sql.OrderByField(field, opts...))
	}
}
func newSelectedProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SelectedProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, false, SelectedProjectTable, SelectedProjectColumn),
	)
}
